import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, Linking } from 'react-native';
import { GoldCard, tokens } from '@museum/ui';
import { ordersStorage } from '../storage/ordersStorage';

export default function OrderDetailScreen({ navigation, route }: any) {
  const { orderId } = route.params || {};
  const [order, setOrder] = useState<any>(null);

  useEffect(() => {
    const loadedOrder = ordersStorage.getOrderById(orderId);
    setOrder(loadedOrder);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —ç–∫—Ä–∞–Ω–∞
    if (navigation) {
      const unsubscribe = navigation.addListener('focus', () => {
        const updatedOrder = ordersStorage.getOrderById(orderId);
        setOrder(updatedOrder);
      });
      
      return () => {
        unsubscribe();
      };
    }
  }, [orderId, navigation]);

  if (!order) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</Text>
      </View>
    );
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'CREATED':
        return tokens.colors.primary;
      case 'ACCEPTED':
        return '#FFA500';
      case 'COMPLETED':
        return tokens.colors.success;
      case 'CANCELLED':
        return tokens.colors.danger;
      default:
        return tokens.colors.muted;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'CREATED':
        return '–°–æ–∑–¥–∞–Ω';
      case 'ACCEPTED':
        return '–ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑';
      case 'EN_ROUTE':
        return '–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏';
      case 'ARRIVED':
        return '–ö—É—Ä—å–µ—Ä –Ω–∞ –º–µ—Å—Ç–µ';
      case 'COMPLETED':
        return '–ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–Ω';
      case 'CANCELLED':
        return '–û—Ç–º–µ–Ω–µ–Ω';
      default:
        return status;
    }
  };

  const getAccessTypeName = (type?: string) => {
    if (!type) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    switch (type) {
      case 'ELEVATOR': return '–° –ª–∏—Ñ—Ç–æ–º';
      case 'STAIRS': return '–ë–µ–∑ –ª–∏—Ñ—Ç–∞';
      case 'PRIVATE_HOUSE': return '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º';
      default: return type;
    }
  };

  const handleRateOrder = () => {
    navigation.navigate('RateOrder', { orderId: order.id });
  };

  const handleContactCourier = () => {
    // In a real app, this would open a phone call or chat
    Alert.alert(
      '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä–æ–º',
      '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—å–µ—Ä—É?',
      [
        { text: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å', onPress: () => Linking.openURL('tel:+380001234567') },
        { text: '–ù–∞–ø–∏—Å–∞—Ç—å', onPress: () => Alert.alert('–ß–∞—Ç', '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫—É—Ä—å–µ—Ä–æ–º') },
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
      ]
    );
  };

  const getTypeText = (type: string) => {
    switch (type) {
      case 'STANDARD':
        return '–û–±—ã—á–Ω—ã–π';
      case 'RECYCLABLE':
        return '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞';
      case 'BULKY':
        return '–ö—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π';
      default:
        return type;
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    });
  };

  const formatTime = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleCancelOrder = () => {
    Alert.alert(
      '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?',
      [
        { text: '–ù–µ—Ç', style: 'cancel' },
        {
          text: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
          style: 'destructive',
          onPress: () => {
            ordersStorage.updateOrderStatus(orderId, 'CANCELLED');
            Alert.alert('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.', [
              { text: 'OK', onPress: () => navigation.goBack() },
            ]);
          },
        },
      ]
    );
  };

  const canCancel = order.status === 'CREATED' || order.status === 'ACCEPTED';

  return (
    <View style={styles.container}>
      <ScrollView style={styles.scrollView}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <Text style={styles.title}>–ó–∞–∫–∞–∑ #{order.id}</Text>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(order.status) }]}>
            <Text style={styles.statusText}>{getStatusText(order.status)}</Text>
          </View>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
        <GoldCard title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ" subtitle={formatDate(order.createdAt)}>
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</Text>
            <Text style={styles.infoValue}>{formatDate(order.createdAt)}</Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>–í—Ä–µ–º—è:</Text>
            <Text style={styles.infoValue}>{formatTime(order.createdAt)}</Text>
          </View>
          {order.updatedAt && (
            <>
              <View style={styles.divider} />
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</Text>
                <Text style={styles.infoValue}>
                  {formatDate(order.updatedAt)} –≤ {formatTime(order.updatedAt)}
                </Text>
              </View>
            </>
          )}
        </GoldCard>

        {/* –ê–¥—Ä–µ—Å */}
        {order.address && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</Text>
            <Text style={styles.sectionText}>{order.address}</Text>
          </View>
        )}

        {/* –î–µ—Ç–∞–ª–∏ */}
        <GoldCard title="–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞">
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>–¢–∏–ø –º—É—Å–æ—Ä–∞:</Text>
            <Text style={styles.infoValue}>{getTypeText(order.type)}</Text>
          </View>
          <View style={styles.divider} />
          {order.floor && (
            <>
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>–≠—Ç–∞–∂:</Text>
                <Text style={styles.infoValue}>{order.floor}</Text>
              </View>
              <View style={styles.divider} />
            </>
          )}
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>–¶–µ–Ω–∞:</Text>
            <Text style={[styles.infoValue, styles.priceText]}>{order.price} ‚Ç¥</Text>
          </View>
          {order.bagsCount && (
            <>
              <View style={styles.divider} />
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤:</Text>
                <Text style={styles.infoValue}>{order.bagsCount}</Text>
              </View>
            </>
          )}
          {order.accessType && (
            <>
              <View style={styles.divider} />
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>–¢–∏–ø –¥–æ—Å—Ç—É–ø–∞:</Text>
                <Text style={styles.infoValue}>{getAccessTypeName(order.accessType)}</Text>
              </View>
            </>
          )}
          {order.doorCode && (
            <>
              <View style={styles.divider} />
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>–ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞:</Text>
                <Text style={styles.infoValue}>{order.doorCode}</Text>
              </View>
            </>
          )}
        </GoldCard>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä–æ–º */}
        {(order.status === 'ACCEPTED' || order.status === 'EN_ROUTE' || order.status === 'ARRIVED') && (
          <TouchableOpacity style={styles.contactButton} onPress={handleContactCourier}>
            <Text style={styles.contactButtonText}>üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä–æ–º</Text>
          </TouchableOpacity>
        )}

        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
        {order.comment && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</Text>
            <Text style={styles.commentText}>{order.comment}</Text>
          </View>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        {canCancel && (
          <View style={styles.actionButtons}>
            <TouchableOpacity style={[styles.actionButton, styles.cancelButton]} onPress={handleCancelOrder}>
              <Text style={styles.cancelButtonText}>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑</Text>
            </TouchableOpacity>
          </View>
        )}
        
        {order.status === 'COMPLETED' && (
          <TouchableOpacity style={styles.rateButton} onPress={handleRateOrder}>
            <Text style={styles.rateButtonText}>‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑</Text>
          </TouchableOpacity>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: tokens.colors.bg,
  },
  scrollView: {
    flex: 1,
    padding: 24,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 24,
  },
  title: {
    color: tokens.colors.primary,
    fontSize: 28,
    fontWeight: '700',
  },
  statusBadge: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  statusText: {
    color: tokens.colors.bg,
    fontSize: 14,
    fontWeight: '700',
  },
  section: {
    backgroundColor: tokens.colors.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  sectionTitle: {
    color: tokens.colors.text,
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
  },
  sectionText: {
    color: tokens.colors.muted,
    fontSize: 14,
    lineHeight: 20,
  },
  commentText: {
    color: tokens.colors.text,
    fontSize: 14,
    lineHeight: 20,
    fontStyle: 'italic',
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 12,
  },
  infoLabel: {
    color: tokens.colors.muted,
    fontSize: 14,
  },
  infoValue: {
    color: tokens.colors.text,
    fontSize: 14,
    fontWeight: '500',
  },
  priceText: {
    color: tokens.colors.primary,
    fontSize: 18,
    fontWeight: '700',
  },
  divider: {
    height: 1,
    backgroundColor: tokens.colors.divider,
    marginVertical: 8,
  },
  actionButtons: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 32,
  },
  actionButton: {
    flex: 1,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: tokens.colors.danger,
    marginBottom: 24,
  },
  cancelButtonText: {
    color: tokens.colors.bg,
    fontSize: 16,
    fontWeight: '700',
  },
  contactButton: {
    backgroundColor: '#007AFF',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginTop: 16,
    marginBottom: 16,
  },
  contactButtonText: {
    color: tokens.colors.bg,
    fontSize: 16,
    fontWeight: '700',
  },
  rateButton: {
    backgroundColor: tokens.colors.primary,
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginTop: 16,
    marginBottom: 24,
  },
  rateButtonText: {
    color: tokens.colors.bg,
    fontSize: 16,
    fontWeight: '700',
  },
  errorText: {
    color: tokens.colors.danger,
    fontSize: 18,
    textAlign: 'center',
    marginTop: 40,
  },
});

