// Mock notifications service for Expo Go
// expo-notifications is not supported in Expo Go, so we use console logging instead

export async function registerForPushNotificationsAsync() {
  console.log('üì± [Notifications] Push notification registration requested (mock)');
  return null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (mock)
export async function sendNotification(title: string, body: string, data?: any) {
  try {
    console.log('üì¢ [Notification]', title, '-', body, data || '');
    // In a real app, this would show a notification
    // For now, we just log to console for Expo Go compatibility
  } catch (error) {
    console.log('Failed to send notification:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
export async function notifyOrderAccepted(orderId: string, courierName?: string) {
  await sendNotification(
    'üöö –ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑!',
    `–ó–∞–∫–∞–∑ #${orderId} –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º. –û–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —É –≤–∞—Å!`,
    { orderId, type: 'ORDER_ACCEPTED' }
  );
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏
export async function notifyCourierOnWay(orderId: string, courierName?: string) {
  await sendNotification(
    'üöó –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏',
    `–ö—É—Ä—å–µ—Ä –ø–æ –∑–∞–∫–∞–∑—É #${orderId} –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º.`,
    { orderId, type: 'COURIER_ON_WAY' }
  );
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –Ω–∞ –º–µ—Å—Ç–µ
export async function notifyCourierArrived(orderId: string) {
  await sendNotification(
    'üìç –ö—É—Ä—å–µ—Ä –Ω–∞ –º–µ—Å—Ç–µ',
    `–ö—É—Ä—å–µ—Ä –ø—Ä–∏–±—ã–ª –ø–æ –∞–¥—Ä–µ—Å—É –∑–∞–∫–∞–∑–∞ #${orderId}.`,
    { orderId, type: 'COURIER_ARRIVED' }
  );
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
export async function notifyOrderCompleted(orderId: string) {
  await sendNotification(
    '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
    `–ú—É—Å–æ—Ä –ø–æ –∑–∞–∫–∞–∑—É #${orderId} —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–∑–µ–Ω!`,
    { orderId, type: 'ORDER_COMPLETED' }
  );
}


